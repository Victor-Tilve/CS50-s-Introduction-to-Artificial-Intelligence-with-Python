'''
Created on 5/03/2021

@author: vtilve
'''

import sys


class Node():
    def __init__(self, state, parent, action):
        self.state = state
        self.parent = parent
        self.action = action
        

class StackFrontier():
    def __init__(self):
        self.frontier = []
    
    def add(self, node):
        self. frontier.append(node)
    
    def contains(self, state):
        return any(node.state == state for node in self.frontier)
    
    def empty(self):
        return len(self.frontier) == 0
    
    def remove(self):
        if self.empty():
            raise Exeption("Empty Frontier")
        else:
            node = self.frontier[-1]
            self.frontier = self.frontier[:-1]
            return node

class QueueFrontier(StackFrontier):
    def remove(self):
        if self.empty():
            raise Exeption("Empty Frontier")
        else:
            node = self.frontier[0]
            self.frontier = self.frontier[1:]
            return node

class Maze():
    def __init__(self,filename):
        #read file and set height and width of maze
        with open(filename) as f:
            contents = f.read()
            
        #Validate start and goal
        if contents.count("A") != 1:
            raise Exception("Maze must have a¿exactly one start")
        if contents.count("B") != 1:
            raise Exception("Maze must have exactly one goal")
        #Determine the high and width of the maze
        contents = contents.splitliner()
        self.height = len(contents)
        self.width = max(len(line) for line in contents)
        
        #keep track of wall
        self.wall = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                try:
                    if contents[i][j] == "A":
                        self.start =(i,j)
                        row.append(False)
                    elif contents[i][j] == "B":
                        self.goal = (i,j)
                        row.append(False)
                    elif contents [i][j] == " ":
                        row.append(False)
                    else:
                        row.append(True)
                except IndexError:
                    row.append(False)
            self.wall.append(row)
            
        self.solution = None
        
    def print(self):
        solution = self.solution[1] if self.solution is not None else None
        print()
        for i, row in enumerate(self.wall):
            for j, col in enumerate(row):
                if col:
                    print("|", end = "") # I have to use █ instead os |
                elif (i,j) == self.start:
                    print("A", end = "")
                elif (i,j) == self.goal:
                    print("B", end ="")
                elif solution is not None and (i,j) in solution:
                    print("*", end = "")
                else:
                    print(" ", end = "")
            print()
        print()
    
    def neighbors(self,state):
        row, col = state
        
        #all possible actions
        
        candidates = [
            ("up", (row - 1, col)),
            ("down", (row + 1, col)),
            ("left", (row, col - 1)),
            ("right", (row, col + 1)),
            ]
        
        # Ensure actions are valid
        
        result = []
        
        for action, (r,c) in candidates:
            try:
                if not self.walk[r][c]:
                    result.append((action, (r,c)))
            except IndexError:
                continue
        
        return result
    def solve(self):
        """Finds a solution to maze, if one exist."""
        
        
        
        
        
        
          
                    
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        